// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protos/game_service/v1/game_service.proto

package game_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamesClient is the client API for Games service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamesClient interface {
	// Create new game
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
}

type gamesClient struct {
	cc grpc.ClientConnInterface
}

func NewGamesClient(cc grpc.ClientConnInterface) GamesClient {
	return &gamesClient{cc}
}

func (c *gamesClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, "/game_service.v1.Games/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamesServer is the server API for Games service.
// All implementations must embed UnimplementedGamesServer
// for forward compatibility
type GamesServer interface {
	// Create new game
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	mustEmbedUnimplementedGamesServer()
}

// UnimplementedGamesServer must be embedded to have forward compatible implementations.
type UnimplementedGamesServer struct {
}

func (UnimplementedGamesServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGamesServer) mustEmbedUnimplementedGamesServer() {}

// UnsafeGamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamesServer will
// result in compilation errors.
type UnsafeGamesServer interface {
	mustEmbedUnimplementedGamesServer()
}

func RegisterGamesServer(s grpc.ServiceRegistrar, srv GamesServer) {
	s.RegisterService(&Games_ServiceDesc, srv)
}

func _Games_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_service.v1.Games/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Games_ServiceDesc is the grpc.ServiceDesc for Games service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Games_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_service.v1.Games",
	HandlerType: (*GamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _Games_CreateGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/game_service/v1/game_service.proto",
}
